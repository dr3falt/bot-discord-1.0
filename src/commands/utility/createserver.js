import { SlashCommandBuilder, PermissionFlagsBits, ChannelType  } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('criarservidor')
        .setDescription('Cria um layout completo de servidor com categorias e cargos')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            // Criar cargos principais
            const roles = [
                { name: 'üåê Admin de Servidor', color: '#FF0000', permissions: [PermissionFlagsBits.Administrator] },
                { name: 'ü§ñ Moderador de Servidor', color: '#00FF00', permissions: [
                    PermissionFlagsBits.ManageMessages,
                    PermissionFlagsBits.KickMembers,
                    PermissionFlagsBits.BanMembers,
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages
                ]},
                { name: 'üíª Desenvolvedor', color: '#0099ff', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                { name: '‚ú® Designer', color: '#FF1493', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                { name: 'üìû Atendente de Suporte', color: '#FFA500', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                { name: 'üì¶ Parceiro', color: '#9400D3', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                { name: 'üì¶ Cliente', color: '#4169E1', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                { name: 'üë• Membro', color: '#808080', permissions: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] }
            ];

            await interaction.editReply({ content: '‚è≥ Criando cargos...', ephemeral: true });
            const createdRoles = {};
            for (const role of roles) {
                try {
                    const createdRole = await interaction.guild.roles.create({
                        name: role.name,
                        color: role.color,
                        permissions: role.permissions,
                        reason: 'Configura√ß√£o autom√°tica do servidor'
                    });
                    createdRoles[role.name] = createdRole;
                } catch (error) {
                    console.error(`Erro ao criar cargo ${role.name}:`, error);
                }
            }

            // Estrutura de categorias e canais
            const categories = [
                {
                    name: 'comunidade üåê',
                    channels: ['üí¨-membro', '‚ùì-moderador', 'üéûÔ∏è-administra√ß√£o']
                },
                {
                    name: 'store info üè™',
                    channels: ['üìå-membro', 'üìù-comprador', 'üì¢-gerente-de-loja']
                },
                {
                    name: 'referencias üìö',
                    channels: ['üì¶-membro', 'üí¨-cliente', 'üíé-equipe-de-suporte']
                },
                {
                    name: 'loja üõí',
                    channels: ['üìå-membro', 'üìå-cliente', 'üìå-gestor-de-produtos', 'üìå-admin-da-loja']
                },
                {
                    name: 'metodos ‚öôÔ∏è',
                    channels: ['üì¶-membro', 'üì¶-desenvolvedor']
                },
                {
                    name: 'utilitarios üõ†Ô∏è',
                    channels: ['üß∞-membro', 'üß∞-administrador-de-ferramentas']
                },
                {
                    name: 'Bots ü§ñ',
                    channels: [ 'üõ°Ô∏è-bot-de-modera√ß√£o', 'üé´-bot-de-tickets', 'üí∏-bot-de-vendas', 'üé∂-bot-de-m√∫sica', 'üéÆ-bot-de-jogos', 'üí∞-bot-de-economia', '‚ö†Ô∏è-bot-vazado', '‚ú®-bot-personalizado'
                    ]
                },
                {
                    name: 'paineis üñ•Ô∏è',
                    channels: ['üì¶-membro', 'üì¶-desenvolvedor', 'üì¶-admin-de-pain√©is']
                },
                {
                    name: 'paineis-full üñ•Ô∏è',
                    channels: ['üì¶-membro', 'üì¶-desenvolvedor', 'üì¶-admin-de-pain√©is']
                },
                {
                    name: 'packs üì¶',
                    channels: ['üì¶-membro', 'üì¶-cliente', 'üì¶-gestor-de-packs']
                },
                {
                    name: 'servidor üè†',
                    channels: ['layout', 'ü§ñ-moderador-de-servidor', 'üö´-fakes', 'üåê-admin-de-servidor', 'üì¶-em-breve']
                },
                {
                    name: 'design üé®',
                    channels: ['‚ú®-designer', 'üñºÔ∏è-membro', 'üñ•Ô∏è-admin-de-design']
                },
                {
                    name: 'parceiros ü§ù',
                    channels: ['üì¶-parceiro', '‚õìÔ∏è‚Äçüí•-admin-de-parcerias']
                },
                {
                    name: 'suporte üõ†Ô∏è',
                    channels: [ '‚ÑπÔ∏è-membro', 'üìû-atendente-de-suporte', 'üìù-feedback', '‚≠ê-avalia√ß√£o', 'üë®‚Äçüíª-staff', 'üíª-desenvolvedor', 'üìú-logs'
                    ]
                }
            ];

            // Configura√ß√µes padr√£o de permiss√µes
            const defaultPermissions = [
                {
                    id: interaction.guild.roles.everyone.id,
                    deny: [PermissionFlagsBits.ViewChannel]
                }
            ];

            // Adicionar permiss√µes para os cargos criados
            if (createdRoles['üåê Admin de Servidor']) {
                defaultPermissions.push({
                    id: createdRoles['üåê Admin de Servidor'].id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageMessages]
                });
            }

            if (createdRoles['ü§ñ Moderador de Servidor']) {
                defaultPermissions.push({
                    id: createdRoles['ü§ñ Moderador de Servidor'].id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                });
            }

            await interaction.editReply({ content: '‚è≥ Criando categorias e canais...', ephemeral: true });

            // Criar categorias e canais
            for (const category of categories) {
                try {
                    const createdCategory = await interaction.guild.channels.create({
                        name: category.name,
                        type: ChannelType.GuildCategory,
                        permissionOverwrites: defaultPermissions,
                        reason: 'Configura√ß√£o autom√°tica do servidor'
                    });

                    // Criar canais dentro da categoria
                    for (const channelName of category.channels) {
                        try {
                            await interaction.guild.channels.create({
                                name: channelName,
                                type: ChannelType.GuildText,
                                parent: createdCategory.id,
                                permissionOverwrites: defaultPermissions,
                                reason: 'Configura√ß√£o autom√°tica do servidor'
                            });
                            // Pequeno delay para evitar rate limits
                            await new Promise(resolve => setTimeout(resolve, 500));
                        } catch (error) {
                            console.error(`Erro ao criar canal ${channelName}:`, error);
                        }
                    }
                } catch (error) {
                    console.error(`Erro ao criar categoria ${category.name}:`, error);
                }
            }

            await interaction.editReply({
                content: '‚úÖ Servidor configurado com sucesso!\n\n' + '**Cargos criados:**\n' +
                        Object.keys(createdRoles).map(role => `‚Ä¢ ${role}`).join('\n') + '\n\n' + '**Categorias criadas:**\n' +
                        categories.map(cat => `‚Ä¢ ${cat.name}`).join('\n'),
                ephemeral: true
            });

        } catch (error) {
            console.error('Erro ao configurar servidor:', error);
            await interaction.editReply({
                content: '‚ùå Ocorreu um erro ao configurar o servidor. Verifique se o bot tem todas as permiss√µes necess√°rias.\n' + 'Erro: ' + error.message,
                ephemeral: true
            });
        }
    },
};
