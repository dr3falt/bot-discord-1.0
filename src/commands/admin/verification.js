import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import { SlashCommandBuilder, PermissionFlagsBits, ChannelType, ButtonBuilder, ButtonStyle, ActionRowBuilder } from 'discord.js';
import embedBuilder from '../../utils/embedBuilder.js';
import { JsonDatabase } from 'wio.db';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Inicializa√ß√£o dos bancos de dados
const configDb = new JsonDatabase({
    databasePath: path.join(__dirname, '../../database/config.json')
});
const verifiedDb = new JsonDatabase({
    databasePath: path.join(__dirname, '../../database/verified_users.json')
});

export default {
    data: new SlashCommandBuilder()
        .setName('verification')
        .setDescription('Configura o sistema de verifica√ß√£o')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Configura o sistema de verifica√ß√£o')
                .addRoleOption(option =>
                    option.setName('cargo')
                        .setDescription('Cargo que ser√° dado ap√≥s a verifica√ß√£o')
                        .setRequired(true))
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('Canal onde ser√° enviada a mensagem de verifica√ß√£o')
                        .addChannelTypes(ChannelType.GuildText)
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('titulo')
                        .setDescription('T√≠tulo da mensagem de verifica√ß√£o')
                        .setRequired(false)
                        .setMaxLength(256))
                .addStringOption(option =>
                    option.setName('descricao')
                        .setDescription('Descri√ß√£o da mensagem de verifica√ß√£o')
                        .setRequired(false)
                        .setMaxLength(2000)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('disable')
                .setDescription('Desativa o sistema de verifica√ß√£o'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Lista todos os membros verificados')),

    async execute(interaction) {
        try {
            const subcommand = interaction.options.getSubcommand();
            const guildId = interaction.guildId;

            // Inicializa as configura√ß√µes se n√£o existirem
            let guildConfig = configDb.get(`guilds.${guildId}`) || {};
            let verifiedUsers = verifiedDb.get(`guilds.${guildId}`) || {};

            if (subcommand === 'setup') {
                const role = interaction.options.getRole('cargo');
                const channel = interaction.options.getChannel('canal');
                const title = interaction.options.getString('titulo') || '‚úÖ Verifica√ß√£o do Servidor';
                const description = interaction.options.getString('descricao') || 
                    '**Bem-vindo ao nosso servidor!**\n\n' +
                    'Para ter acesso completo ao servidor, voc√™ precisa passar por uma breve verifica√ß√£o.\n' +
                    'Isso nos ajuda a manter nossa comunidade segura e livre de bots maliciosos.\n\n' +
                    '**Como verificar:**\n' +
                    '1. Clique no bot√£o "Verificar" abaixo\n' +
                    '2. Responda √†s perguntas que aparecerem\n' +
                    '3. Ap√≥s aprova√ß√£o, voc√™ receber√° acesso autom√°tico\n\n' +
                    'üîí Seus dados ser√£o mantidos em seguran√ßa e usados apenas para verifica√ß√£o.';

                // Atualiza a configura√ß√£o do servidor
                guildConfig.verification = {
                    enabled: true,
                    roleId: role.id,
                    channelId: channel.id,
                    messageTitle: title,
                    messageDescription: description,
                    lastUpdate: Date.now()
                };

                // Salva as configura√ß√µes
                configDb.set(`guilds.${guildId}`, guildConfig);

                // Cria o bot√£o de verifica√ß√£o
                const verifyButton = new ButtonBuilder()
                    .setCustomId('verify_button')
                    .setLabel('Verificar')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('‚úÖ');

                // Cria o embed de verifica√ß√£o
                const verificationEmbed = embedBuilder.custom({
                    title: title,
                    description: description,
                    color: 0x2ecc71,
                    footer: { text: 'Sistema de Verifica√ß√£o' }
                });

                // Envia a mensagem com o bot√£o
                const message = await channel.send({
                    embeds: [verificationEmbed],
                    components: [new ActionRowBuilder().addComponents(verifyButton)]
                });

                // Responde ao comando
                return interaction.reply({
                    embeds: [embedBuilder.success(
                        '‚úÖ Sistema Configurado',
                        `O sistema de verifica√ß√£o foi configurado com sucesso!\nCanal: ${channel}\nCargo: ${role}`
                    )],
                    ephemeral: true
                });
            }

            else if (subcommand === 'disable') {
                if (!guildConfig.verification?.enabled) {
                    return interaction.reply({
                        embeds: [embedBuilder.error(
                            '‚ùå Sistema n√£o ativo',
                            'O sistema de verifica√ß√£o j√° est√° desativado.'
                        )],
                        ephemeral: true
                    });
                }

                // Desativa o sistema
                guildConfig.verification.enabled = false;
                configDb.set(`guilds.${guildId}`, guildConfig);

                return interaction.reply({
                    embeds: [embedBuilder.success(
                        '‚úÖ Sistema Desativado',
                        'O sistema de verifica√ß√£o foi desativado com sucesso.'
                    )],
                    ephemeral: true
                });
            }

            else if (subcommand === 'list') {
                const verifiedList = Object.keys(verifiedUsers).map(userId => `<@${userId}>`).join('\n') || 'Nenhum membro verificado.';

                return interaction.reply({
                    embeds: [embedBuilder.custom({
                        title: 'üìã Membros Verificados',
                        description: verifiedList,
                        color: 0x3498db
                    })],
                    ephemeral: true
                });
            }
        } catch (error) {
            console.error('Erro no comando de verifica√ß√£o:', error);
            return interaction.reply({
                embeds: [embedBuilder.error(
                    '‚ùå Erro',
                    'Ocorreu um erro ao executar o comando. Por favor, tente novamente.'
                )],
                ephemeral: true
            });
        }
    }
};
